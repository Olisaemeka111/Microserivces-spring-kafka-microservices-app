name: Deploy Optimized Resources to GKE

on:
  push:
    branches: [ main ]
    paths:
      - 'k8s/*.yaml'
      - 'k8s/monitoring/*.yaml'
      - 'k8s/logging/*.yaml'
  workflow_dispatch:

env:
  PROJECT_ID: spring-kafka-microservices
  GKE_CLUSTER: spring-kafka-cluster
  GKE_ZONE: us-central1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    # Authenticate using a service account key directly
    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Configure Docker
      run: |
        gcloud --quiet auth configure-docker us-central1-docker.pkg.dev
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and Push Discovery Server Image
      uses: docker/build-push-action@v4
      with:
        context: ./discovery-server
        push: true
        tags: us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/microservices/discovery-server:latest
        
    - name: Build and Push API Gateway Image
      uses: docker/build-push-action@v4
      with:
        context: ./api-gateway
        push: true
        tags: us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/microservices/api-gateway:latest
        
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Create namespace if not exists
      run: kubectl create namespace microservices-app --dry-run=client -o yaml | kubectl apply -f -
      
    - name: Clean up existing deployments
      run: |
        echo "Cleaning up existing deployments..."
        kubectl delete deployment api-gateway discovery-server -n microservices-app || true
        sleep 30
        echo "Checking pod status after cleanup..."
        kubectl get pods -n microservices-app
        
    - name: Deploy infrastructure components
      run: |
        kubectl apply -f k8s/infrastructure.yaml
        sleep 30
        
    - name: Deploy Discovery Server (Eureka)
      run: |
        kubectl apply -f k8s/discovery-server.yaml
        sleep 60  # Wait for discovery server to be ready
        kubectl get pods -n microservices-app -l app=discovery-server
        
    - name: Deploy API Gateway
      run: kubectl apply -f k8s/api-gateway.yaml
        
    - name: Deploy monitoring components
      run: |
        kubectl apply -f k8s/monitoring/prometheus-config.yaml
        kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
        kubectl apply -f k8s/monitoring/grafana-deployment.yaml
        
    - name: Deploy logging components
      run: |
        kubectl apply -f k8s/logging/elasticsearch-deployment.yaml
        kubectl apply -f k8s/logging/kibana-deployment.yaml
        kubectl apply -f k8s/logging/logstash-deployment.yaml
      
    - name: Wait for deployments
      run: |
        echo "Waiting for infrastructure components to be ready..."
        kubectl rollout status deployment/kafka -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/mongodb -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/mysql -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/mysql-in -n microservices-app --timeout=300s || true
        
        echo "Waiting for microservices to be ready..."
        kubectl rollout status deployment/api-gateway -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/product-service -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/order-service -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/inventory-service -n microservices-app --timeout=300s || true
        kubectl rollout status deployment/notification-service -n microservices-app --timeout=300s || true
        
    - name: Check deployment status
      run: |
        echo "Checking pod status..."
        kubectl get pods -n microservices-app
        
        echo "Checking services..."
        kubectl get services -n microservices-app
