name: Build and Deploy to GKE

# This workflow builds and deploys the spring-kafka-microservices app to GKE using service account authentication
# Last updated: April 5, 2024

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: spring-kafka-microservices
  GKE_CLUSTER: spring-kafka-cluster
  GKE_REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: spring-kafka-microservices/spring-kafka-microservices
  GITHUB_SHA: ${{ github.sha }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # Add permissions for reading secrets
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: spring-kafka-microservices
        create_credentials_file: true
        export_environment_variables: true
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'
    
    - name: Configure Docker
      run: |
        gcloud auth configure-docker $REGISTRY --quiet
    
    # Check repository exists without needing IAM policy permissions
    - name: Check Artifact Registry
      run: |
        echo "Checking Artifact Registry repository..."
        gcloud artifacts repositories describe spring-kafka-microservices --location=${{ env.GKE_REGION }} || echo "Repository not found"
    
    - name: Build with Maven
      run: |
        echo "Building with Maven..."
        mvn -B clean resources:resources package --file pom.xml -DskipTests
        echo "Maven build completed. Listing JAR files:"
        find . -name "*.jar" | grep "/target/"
        echo "Verifying application properties:"
        find . -name "application*.properties" | grep "/target/classes/"
    
    # Build and push API Gateway
    - name: Build and Push API Gateway
      run: |
        echo "Building API Gateway Docker image..."
        # First ensure configuration files are in place
        mkdir -p ./tmp/config
        cp ./api-gateway/target/*.jar ./tmp/api-gateway.jar
        cp ./api-gateway/target/classes/application*.properties ./tmp/config/
        
        # Build using the copied JAR and config files
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:${{ env.GITHUB_SHA }} \
                     -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:latest \
                     -f ./api-gateway/Dockerfile \
                     --build-arg JAR_FILE=./tmp/api-gateway.jar \
                     --build-arg CONFIG_DIR=./tmp/config \
                     .
        
        # Push the images
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:${{ env.GITHUB_SHA }}
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/api-gateway:latest
    
    # Build and push Discovery Server
    - name: Build and Push Discovery Server
      run: |
        echo "Building Discovery Server Docker image..."
        # First copy the JAR file to a simpler location
        mkdir -p ./tmp
        cp ./discovery-server/target/*.jar ./tmp/discovery-server.jar
        
        # Build using the copied JAR
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/discovery-server:${{ env.GITHUB_SHA }} \
                     -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/discovery-server:latest \
                     -f ./discovery-server/Dockerfile \
                     --build-arg JAR_FILE=./tmp/discovery-server.jar \
                     .
        
        # Push the images
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/discovery-server:${{ env.GITHUB_SHA }}
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/discovery-server:latest
    
    # Build and push Product Service
    - name: Build and Push Product Service
      run: |
        echo "Building Product Service Docker image..."
        # First copy the JAR file to a simpler location
        mkdir -p ./tmp
        cp ./product-service/target/*.jar ./tmp/product-service.jar
        
        # Build using the copied JAR
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/product-service:${{ env.GITHUB_SHA }} \
                     -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/product-service:latest \
                     -f ./product-service/Dockerfile \
                     --build-arg JAR_FILE=./tmp/product-service.jar \
                     .
        
        # Push the images
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/product-service:${{ env.GITHUB_SHA }}
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/product-service:latest
    
    # Build and push Order Service
    - name: Build and Push Order Service
      run: |
        echo "Building Order Service Docker image..."
        # First copy the JAR file to a simpler location
        mkdir -p ./tmp
        cp ./order-service/target/*.jar ./tmp/order-service.jar
        
        # Build using the copied JAR
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/order-service:${{ env.GITHUB_SHA }} \
                     -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/order-service:latest \
                     -f ./order-service/Dockerfile \
                     --build-arg JAR_FILE=./tmp/order-service.jar \
                     .
        
        # Push the images
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/order-service:${{ env.GITHUB_SHA }}
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/order-service:latest
    
    # Build and push Inventory Service
    - name: Build and Push Inventory Service
      run: |
        echo "Building Inventory Service Docker image..."
        # First copy the JAR file to a simpler location
        mkdir -p ./tmp
        cp ./inventory-service/target/*.jar ./tmp/inventory-service.jar
        
        # Build using the copied JAR
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/inventory-service:${{ env.GITHUB_SHA }} \
                     -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/inventory-service:latest \
                     -f ./inventory-service/Dockerfile \
                     --build-arg JAR_FILE=./tmp/inventory-service.jar \
                     .
        
        # Push the images
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/inventory-service:${{ env.GITHUB_SHA }}
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/inventory-service:latest
    
    # Build and push Notification Service
    - name: Build and Push Notification Service
      run: |
        echo "Building Notification Service Docker image..."
        # First copy the JAR file to a simpler location
        mkdir -p ./tmp
        cp ./notification-service/target/*.jar ./tmp/notification-service.jar
        
        # Build using the copied JAR
        docker build -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/notification-service:${{ env.GITHUB_SHA }} \
                     -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/notification-service:latest \
                     -f ./notification-service/Dockerfile \
                     --build-arg JAR_FILE=./tmp/notification-service.jar \
                     .
        
        # Push the images
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/notification-service:${{ env.GITHUB_SHA }}
        docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/notification-service:latest
    
    # Debug environment variables
    - name: Debug Environment Variables
      run: |
        echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
        echo "GKE_CLUSTER: ${{ env.GKE_CLUSTER }}"
        echo "GKE_REGION: ${{ env.GKE_REGION }}"
        echo "REGISTRY: ${{ env.REGISTRY }}"
        echo "REPOSITORY: ${{ env.REPOSITORY }}"
        echo "GITHUB_SHA: ${{ env.GITHUB_SHA }}"
    
    # Connect to GKE using direct gcloud command instead of the action
    - name: Connect to GKE Cluster
      run: |
        echo "Connecting to GKE cluster ${{ env.GKE_CLUSTER }} in region ${{ env.GKE_REGION }}..."
        gcloud container clusters get-credentials "${{ env.GKE_CLUSTER }}" --region "${{ env.GKE_REGION }}" --project "${{ env.PROJECT_ID }}"
        kubectl get namespace
    
    - name: Update Kubernetes manifests
      run: |
        echo "Updating Kubernetes manifests with image tag: ${{ env.GITHUB_SHA }}"
        sed -i "s|IMAGE_TAG|${{ env.GITHUB_SHA }}|g" k8s/*.yaml
    
    # Apply Kubernetes manifests excluding workflow files
    - name: Deploy to GKE
      run: |
        echo "Applying Kubernetes manifests..."
        kubectl apply -f k8s/namespace.yaml
        
        # Apply manifests but exclude any workflow files
        for file in k8s/*.yaml; do
          if [[ ! "$file" =~ "workflow" ]]; then
            echo "Applying $file"
            kubectl apply -f "$file"
          fi
        done
        
        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/api-gateway -n microservices-app
        kubectl rollout status deployment/discovery-server -n microservices-app
        kubectl rollout status deployment/product-service -n microservices-app
        kubectl rollout status deployment/order-service -n microservices-app
        kubectl rollout status deployment/inventory-service -n microservices-app
        kubectl rollout status deployment/notification-service -n microservices-app