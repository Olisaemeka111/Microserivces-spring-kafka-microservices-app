name: Build and Deploy to GKE

# This workflow builds and deploys the spring-kafka-microservices app to GKE using service account authentication
# Last updated: April 5, 2024

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: spring-kafka-microservices
  GKE_CLUSTER: spring-kafka-cluster
  GKE_REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: spring-kafka-microservices/spring-kafka-microservices
  GITHUB_SHA: ${{ github.sha }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'
    
    - name: Configure Docker
      run: |
        gcloud auth configure-docker $REGISTRY --quiet
    
    # Check repository exists without needing IAM policy permissions
    - name: Check Artifact Registry
      run: |
        echo "Checking Artifact Registry repository..."
        gcloud artifacts repositories describe spring-kafka-microservices --location=${{ env.GKE_REGION }} || echo "Repository not found"
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests
    
    # Build and push API Gateway
    - name: Build and Push API Gateway
      run: |
        docker build -t $REGISTRY/$REPOSITORY/api-gateway:$GITHUB_SHA -t $REGISTRY/$REPOSITORY/api-gateway:latest ./api-gateway
        docker push $REGISTRY/$REPOSITORY/api-gateway:$GITHUB_SHA
        docker push $REGISTRY/$REPOSITORY/api-gateway:latest
    
    # Build and push Discovery Server
    - name: Build and Push Discovery Server
      run: |
        docker build -t $REGISTRY/$REPOSITORY/discovery-server:$GITHUB_SHA -t $REGISTRY/$REPOSITORY/discovery-server:latest ./discovery-server
        docker push $REGISTRY/$REPOSITORY/discovery-server:$GITHUB_SHA
        docker push $REGISTRY/$REPOSITORY/discovery-server:latest
    
    # Build and push Product Service
    - name: Build and Push Product Service
      run: |
        docker build -t $REGISTRY/$REPOSITORY/product-service:$GITHUB_SHA -t $REGISTRY/$REPOSITORY/product-service:latest ./product-service
        docker push $REGISTRY/$REPOSITORY/product-service:$GITHUB_SHA
        docker push $REGISTRY/$REPOSITORY/product-service:latest
    
    # Build and push Order Service
    - name: Build and Push Order Service
      run: |
        docker build -t $REGISTRY/$REPOSITORY/order-service:$GITHUB_SHA -t $REGISTRY/$REPOSITORY/order-service:latest ./order-service
        docker push $REGISTRY/$REPOSITORY/order-service:$GITHUB_SHA
        docker push $REGISTRY/$REPOSITORY/order-service:latest
    
    # Build and push Inventory Service
    - name: Build and Push Inventory Service
      run: |
        docker build -t $REGISTRY/$REPOSITORY/inventory-service:$GITHUB_SHA -t $REGISTRY/$REPOSITORY/inventory-service:latest ./inventory-service
        docker push $REGISTRY/$REPOSITORY/inventory-service:$GITHUB_SHA
        docker push $REGISTRY/$REPOSITORY/inventory-service:latest
    
    # Build and push Notification Service
    - name: Build and Push Notification Service
      run: |
        docker build -t $REGISTRY/$REPOSITORY/notification-service:$GITHUB_SHA -t $REGISTRY/$REPOSITORY/notification-service:latest ./notification-service
        docker push $REGISTRY/$REPOSITORY/notification-service:$GITHUB_SHA
        docker push $REGISTRY/$REPOSITORY/notification-service:latest
    
    # Debug environment variables
    - name: Debug Environment Variables
      run: |
        echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
        echo "GKE_CLUSTER: ${{ env.GKE_CLUSTER }}"
        echo "GKE_REGION: ${{ env.GKE_REGION }}"
    
    # Connect to GKE using direct gcloud command instead of the action
    - name: Connect to GKE Cluster
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region=${{ env.GKE_REGION }} --project=${{ env.PROJECT_ID }}
    
    - name: Update Kubernetes manifests
      run: |
        sed -i "s|IMAGE_TAG|$GITHUB_SHA|g" k8s/*.yaml
    
    # Apply Kubernetes manifests excluding workflow files
    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/namespace.yaml
        
        # Apply manifests but exclude any workflow files
        for file in k8s/*.yaml; do
          if [[ ! "$file" =~ "workflow" ]]; then
            kubectl apply -f $file
          fi
        done
        
        kubectl rollout status deployment/api-gateway -n microservices-app
        kubectl rollout status deployment/discovery-server -n microservices-app
        kubectl rollout status deployment/product-service -n microservices-app
        kubectl rollout status deployment/order-service -n microservices-app
        kubectl rollout status deployment/inventory-service -n microservices-app
        kubectl rollout status deployment/notification-service -n microservices-app 