name: Build and Deploy to GKE

# This workflow builds and deploys the spring-kafka-microservices app to GKE using service account authentication
# Last updated: April 5, 2024

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: spring-kafka-microservices
  GKE_CLUSTER: spring-kafka-cluster
  GKE_REGION: us-central1
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: spring-kafka-microservices/microservices
  GITHUB_SHA: ${{ github.sha }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # Add permissions for reading secrets
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Set Repository Path
      run: |
        echo "REPOSITORY=spring-kafka-microservices/microservices" >> $GITHUB_ENV
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: spring-kafka-microservices
        create_credentials_file: true
        export_environment_variables: true
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'
    
    - name: Configure Docker
      run: |
        gcloud auth configure-docker $REGISTRY --quiet
    
    # Check repository exists without needing IAM policy permissions
    - name: Check Artifact Registry
      run: |
        echo "Checking Artifact Registry repository..."
        gcloud artifacts repositories describe spring-kafka-microservices --location=${{ env.GKE_REGION }} || echo "Repository not found"
    
    - name: Build with Maven
      run: |
        echo "Building with Maven..."
        mvn -B clean package spring-boot:repackage -DskipTests
        echo "Maven build completed. Verifying JAR files..."
        for module in api-gateway discovery-server product-service order-service inventory-service notification-service; do
          echo "Checking $module JAR..."
          ls -l $module/target/*.jar || echo "No JAR found for $module"
          if [ -f $module/target/*.jar ]; then
            echo "Verifying manifest for $module..."
            jar tvf $module/target/*.jar | grep -i "main" || echo "No main manifest found in $module JAR"
            echo "Listing manifest entries for $module..."
            unzip -p $module/target/*.jar META-INF/MANIFEST.MF || echo "No manifest found in $module JAR"
          fi
        done
    
    # Build and push API Gateway
    - name: Build and Push API Gateway
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./api-gateway/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/api-gateway:${{ env.GITHUB_SHA }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/api-gateway:latest
    
    # Build and push Discovery Server
    - name: Build and Push Discovery Server
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./discovery-server/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/discovery-server:${{ env.GITHUB_SHA }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/discovery-server:latest
    
    # Build and push Product Service
    - name: Build and Push Product Service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./product-service/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/product-service:${{ env.GITHUB_SHA }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/product-service:latest
    
    # Build and push Order Service
    - name: Build and Push Order Service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./order-service/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/order-service:${{ env.GITHUB_SHA }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/order-service:latest
    
    # Build and push Inventory Service
    - name: Build and Push Inventory Service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./inventory-service/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/inventory-service:${{ env.GITHUB_SHA }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/inventory-service:latest
    
    # Build and push Notification Service
    - name: Build and Push Notification Service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./notification-service/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/notification-service:${{ env.GITHUB_SHA }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/microservices/notification-service:latest
    
    # Debug environment variables
    - name: Debug Environment Variables
      run: |
        echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
        echo "GKE_CLUSTER: ${{ env.GKE_CLUSTER }}"
        echo "GKE_REGION: ${{ env.GKE_REGION }}"
        echo "REGISTRY: ${{ env.REGISTRY }}"
        echo "REPOSITORY: ${{ env.REPOSITORY }}"
        echo "GITHUB_SHA: ${{ env.GITHUB_SHA }}"
    
    # Connect to GKE using direct gcloud command instead of the action
    - name: Connect to GKE Cluster
      run: |
        echo "Connecting to GKE cluster ${{ env.GKE_CLUSTER }} in region ${{ env.GKE_REGION }}..."
        gcloud container clusters get-credentials "${{ env.GKE_CLUSTER }}" --region "${{ env.GKE_REGION }}" --project "${{ env.PROJECT_ID }}"
        kubectl get namespace
    
    - name: Update Kubernetes manifests
      run: |
        echo "Updating Kubernetes manifests with image tag: ${{ env.GITHUB_SHA }}"
        sed -i "s|IMAGE_TAG|${{ env.GITHUB_SHA }}|g" k8s/*.yaml
    
    # Apply Kubernetes manifests excluding workflow files
    - name: Deploy to GKE
      run: |
        echo "Applying Kubernetes manifests..."
        kubectl apply -f k8s/namespace.yaml
        
        # Apply manifests but exclude any workflow files
        for file in k8s/*.yaml; do
          if [[ ! "$file" =~ "workflow" ]]; then
            echo "Applying $file"
            kubectl apply -f "$file"
          fi
        done
        
        echo "Debug: Checking pod status..."
        kubectl get pods -n microservices-app
        echo "Debug: Checking pod logs..."
        kubectl logs -l app=api-gateway -n microservices-app --tail=100 || true
        
        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/api-gateway -n microservices-app
        kubectl rollout status deployment/discovery-server -n microservices-app
        kubectl rollout status deployment/product-service -n microservices-app
        kubectl rollout status deployment/order-service -n microservices-app
        kubectl rollout status deployment/inventory-service -n microservices-app
        kubectl rollout status deployment/notification-service -n microservices-app