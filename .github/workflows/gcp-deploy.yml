name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: spring-kafka-microservices
  ORDER_SERVICE_IMAGE: order-service
  PRODUCT_SERVICE_IMAGE: product-service
  INVENTORY_SERVICE_IMAGE: inventory-service
  NOTIFICATION_SERVICE_IMAGE: notification-service
  API_GATEWAY_IMAGE: api-gateway

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup Java
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build with Maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests

    # Setup Google Cloud CLI
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    # Configure Docker to use the gcloud command-line tool as a credential helper
    - name: 'Set up Docker Auth'
      run: |
        gcloud --quiet auth configure-docker
        gcloud --quiet auth configure-docker us-central1-docker.pkg.dev

    # Enable necessary APIs
    - name: 'Enable necessary APIs'
      run: |
        gcloud services enable cloudresourcemanager.googleapis.com
        gcloud services enable container.googleapis.com
        gcloud services enable artifactregistry.googleapis.com
        gcloud services enable iam.googleapis.com
      continue-on-error: true

    # Get the GKE credentials
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Create Artifact Registry repository if it doesn't exist
    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=us-central1 \
          --description="Repository for Spring Kafka Microservices" \
          --quiet || true
      
    # Build and push Docker images
    - name: Build and Push Order Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.ORDER_SERVICE_IMAGE }}:${{ github.sha }} ./order-service
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.ORDER_SERVICE_IMAGE }}:${{ github.sha }}

    - name: Build and Push Product Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.PRODUCT_SERVICE_IMAGE }}:${{ github.sha }} ./product-service
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.PRODUCT_SERVICE_IMAGE }}:${{ github.sha }}

    - name: Build and Push Inventory Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.INVENTORY_SERVICE_IMAGE }}:${{ github.sha }} ./inventory-service
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.INVENTORY_SERVICE_IMAGE }}:${{ github.sha }}

    - name: Build and Push Notification Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.NOTIFICATION_SERVICE_IMAGE }}:${{ github.sha }} ./notification-service
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.NOTIFICATION_SERVICE_IMAGE }}:${{ github.sha }}

    - name: Build and Push API Gateway
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.API_GATEWAY_IMAGE }}:${{ github.sha }} ./api-gateway
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.API_GATEWAY_IMAGE }}:${{ github.sha }}

    # Update the Kubernetes manifests with the new image tags
    - name: Update Kubernetes manifests
      run: |
        sed -i "s|image: .*order-service.*|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.ORDER_SERVICE_IMAGE }}:${{ github.sha }}|g" k8s/services.yaml
        sed -i "s|image: .*product-service.*|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.PRODUCT_SERVICE_IMAGE }}:${{ github.sha }}|g" k8s/services.yaml
        sed -i "s|image: .*inventory-service.*|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.INVENTORY_SERVICE_IMAGE }}:${{ github.sha }}|g" k8s/services.yaml
        sed -i "s|image: .*notification-service.*|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.NOTIFICATION_SERVICE_IMAGE }}:${{ github.sha }}|g" k8s/services.yaml
        sed -i "s|image: .*api-gateway.*|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.API_GATEWAY_IMAGE }}:${{ github.sha }}|g" k8s/api-gateway.yaml

    # Deploy the application to GKE
    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/infrastructure.yaml
        kubectl apply -f k8s/services.yaml
        kubectl apply -f k8s/api-gateway.yaml
        kubectl get services -n microservices-app
        
    # Get the API Gateway external IP
    - name: Get API Gateway External IP
      run: |
        echo "Waiting for API Gateway external IP to be assigned..."
        for i in {1..10}; do
          EXTERNAL_IP=$(kubectl get service api-gateway -n microservices-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$EXTERNAL_IP" ]; then
            echo "API Gateway is accessible at: http://$EXTERNAL_IP"
            break
          fi
          echo "Waiting for external IP... (attempt $i/10)"
          sleep 30
        done
        
        if [ -z "$EXTERNAL_IP" ]; then
          echo "Couldn't get external IP after waiting. You can check it later with:"
          echo "kubectl get service api-gateway -n microservices-app"
        fi
