# Integrating Monitoring and Logging into GitHub Actions Workflow

To deploy the monitoring and logging components through your existing GitHub Actions workflow, follow these steps:

## 1. Add the Monitoring and Logging Workflow File

Copy the monitoring-logging-workflow.yaml file to your GitHub repository:

```
cp k8s/monitoring-logging-workflow.yaml .github/workflows/monitoring-logging.yml
```

## 2. Integrate into Main Workflow (Alternative Approach)

If you prefer to integrate monitoring and logging deployment into your main workflow, add these steps to your existing `.github/workflows/gcp-deploy.yml` file:

```yaml
# Add after your existing microservices deployment steps
- name: Deploy Prometheus for monitoring
  run: |
    kubectl apply -f k8s/monitoring/prometheus-config.yaml
    kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
    
- name: Deploy Grafana for monitoring
  run: |
    kubectl apply -f k8s/monitoring/grafana-deployment.yaml
    
- name: Deploy ELK Stack for logging
  run: |
    kubectl apply -f k8s/logging/elasticsearch-deployment.yaml
    kubectl apply -f k8s/logging/kibana-deployment.yaml
    kubectl apply -f k8s/logging/logstash-deployment.yaml
    kubectl apply -f k8s/logging/filebeat-deployment.yaml
    
- name: Wait for monitoring deployments
  run: |
    kubectl rollout status deployment prometheus -n microservices-app --timeout=300s
    kubectl rollout status deployment grafana -n microservices-app --timeout=300s
```

## 3. Push Changes to GitHub

```
git add .github/workflows/monitoring-logging.yml
git add k8s/monitoring/
git add k8s/logging/
git commit -m "Add monitoring and logging components"
git push origin main
```

## 4. Run the Workflow

You can either:
- Wait for the workflow to run automatically on the next push to main
- Manually trigger the workflow from the GitHub Actions tab in your repository

## 5. Verify Deployment

After the workflow completes, you can verify the deployment:

```powershell
# Set the environment variable for GKE auth plugin
$env:USE_GKE_GCLOUD_AUTH_PLUGIN = "True"

# Get credentials for your GKE cluster
gcloud container clusters get-credentials spring-kafka-cluster --zone us-central1 --project spring-kafka-microservices

# Check monitoring deployments
kubectl get deployments -n microservices-app | grep -E 'prometheus|grafana'

# Check logging deployments
kubectl get deployments,statefulsets -n microservices-app | grep -E 'elasticsearch|kibana|logstash|filebeat'
```

## 6. Access Dashboards

Once deployed, you can access the dashboards using port-forwarding:

```powershell
# Access Grafana
kubectl port-forward svc/grafana 3000:80 -n microservices-app
# Open http://localhost:3000 (username: admin, password: admin123)

# Access Kibana
kubectl port-forward svc/kibana 5601:80 -n microservices-app
# Open http://localhost:5601
```
