# Run these commands in Cloud Shell to troubleshoot the CrashLoopBackOff issues

# 1. Check API Gateway logs (most likely to show the root issue)
kubectl logs -n microservices-app -l app=api-gateway --tail=100

# 2. Check if discovery-server is deployed and running
kubectl get pods -n microservices-app -l app=discovery-server
kubectl get services -n microservices-app -l app=discovery-server

# 3. If discovery-server is missing, this is likely the root cause
# The API Gateway and other services depend on Eureka for service discovery
kubectl apply -f k8s/discovery-server.yaml

# 4. Check for config issues in the API Gateway
kubectl describe pod -n microservices-app -l app=api-gateway

# 5. Check Kafka logs to see why it's failing
kubectl logs -n microservices-app -l app=kafka --tail=100

# 6. Check if services can resolve each other by DNS
kubectl run -it --rm --restart=Never busybox -n microservices-app --image=busybox -- nslookup discovery-server
kubectl run -it --rm --restart=Never busybox -n microservices-app --image=busybox -- nslookup kafka
kubectl run -it --rm --restart=Never busybox -n microservices-app --image=busybox -- nslookup mongodb

# 7. Check for any configuration issues in the services
kubectl describe configmap -n microservices-app

# 8. If you find that discovery-server is missing, deploy it and then restart the other services
kubectl rollout restart deployment -n microservices-app api-gateway
kubectl rollout restart deployment -n microservices-app product-service
kubectl rollout restart deployment -n microservices-app order-service
kubectl rollout restart deployment -n microservices-app inventory-service
kubectl rollout restart deployment -n microservices-app notification-service
