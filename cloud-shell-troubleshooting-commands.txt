# Commands to run in Cloud Shell to troubleshoot pod issues

# 1. Check the detailed status of the discovery-server pod
kubectl describe pod -n microservices-app -l app=discovery-server

# 2. Delete the problematic deployments
kubectl delete deployment discovery-server api-gateway -n microservices-app

# 3. Wait for pods to be terminated
echo "Waiting for pods to terminate..."
sleep 30

# 4. Apply the updated discovery-server with the new image
kubectl apply -f k8s/discovery-server.yaml

# 5. Wait for discovery-server to start
echo "Waiting for discovery-server to start..."
sleep 60

# 6. Check discovery-server status
kubectl get pods -n microservices-app -l app=discovery-server

# 7. Apply the updated api-gateway with nginx image
kubectl apply -f k8s/api-gateway.yaml

# 8. Wait for api-gateway to start
echo "Waiting for api-gateway to start..."
sleep 60

# 9. Check api-gateway status
kubectl get pods -n microservices-app -l app=api-gateway

# 10. Check the status of all pods
kubectl get pods -n microservices-app

# 11. Check the logs of the discovery-server
kubectl logs -n microservices-app -l app=discovery-server --tail=50

# 12. Check the logs of the api-gateway
kubectl logs -n microservices-app -l app=api-gateway --tail=50

# 13. Check the events in the namespace to see if there are any resource constraints
kubectl get events -n microservices-app --sort-by='.lastTimestamp'

# 14. Check only pods that are not running
kubectl get pods -n microservices-app --field-selector status.phase!=Running
