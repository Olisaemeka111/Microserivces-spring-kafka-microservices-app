apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: microservices-app
  labels:
    app: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      # Add initContainer to wait for discovery-server to be ready
      initContainers:
      - name: wait-for-discovery-server
        image: busybox:1.28
        command: ['sh', '-c', 'until nslookup discovery-server.microservices-app.svc.cluster.local; do echo waiting for discovery-server; sleep 2; done;']
      containers:
      - name: api-gateway
        image: us-central1-docker.pkg.dev/spring-kafka-microservices/microservices/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "k8s"
        - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
          value: "http://discovery-server:8761/eureka"
        - name: SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED
          value: "true"
        - name: SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID
          value: "true"
        # Using a ConfigMap for routes instead of environment variables
        volumeMounts:
        - name: gateway-config
          mountPath: /application/config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: gateway-config
        configMap:
          name: api-gateway-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: microservices-app
data:
  application-k8s.properties: |
    server.port=8080
    spring.application.name=api-gateway
    eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    eureka.client.register-with-eureka=true
    eureka.client.fetch-registry=true
    eureka.instance.preferIpAddress=true
    
    # Increase Eureka timeouts for Kubernetes environment
    eureka.client.registry-fetch-interval-seconds=5
    eureka.instance.lease-renewal-interval-in-seconds=10
    eureka.instance.lease-expiration-duration-in-seconds=20
    
    # Retry configuration for service discovery
    spring.cloud.loadbalancer.retry.enabled=true
    spring.cloud.loadbalancer.retry.max-retries-on-same-service-instance=3
    spring.cloud.loadbalancer.retry.max-retries-on-next-service-instance=2
    spring.cloud.loadbalancer.retry.retry-on-all-operations=true
    
    # Enable service discovery for gateway routes
    spring.cloud.gateway.discovery.locator.enabled=true
    spring.cloud.gateway.discovery.locator.lower-case-service-id=true
    
    # Logging configuration
    logging.level.root=INFO
    logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator=INFO
    logging.level.org.springframework.cloud.gateway=TRACE
    logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
    
    # Product service route
    spring.cloud.gateway.routes[0].id=product-service
    spring.cloud.gateway.routes[0].uri=lb://product-service
    spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product/**
    
    # Order service route
    spring.cloud.gateway.routes[1].id=order-service
    spring.cloud.gateway.routes[1].uri=lb://order-service
    spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order/**
    
    # Discovery service route
    spring.cloud.gateway.routes[2].id=discovery-server
    spring.cloud.gateway.routes[2].uri=http://discovery-server:8761
    spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
    spring.cloud.gateway.routes[2].filters[0]=SetPath=/
    
    # Discovery server static resources
    spring.cloud.gateway.routes[3].id=discovery-server-static
    spring.cloud.gateway.routes[3].uri=http://discovery-server:8761
    spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**
    
    # Actuator endpoints
    management.endpoints.web.exposure.include=health,info,prometheus
    management.endpoint.health.show-details=always
    management.endpoint.health.probes.enabled=true
    management.health.livenessstate.enabled=true
    management.health.readinessstate.enabled=true
    
    # Tracing configuration
    management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
    management.tracing.sampling.probability=1.0

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: microservices-app
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "api-gateway-backendconfig"}'
  labels:
    app: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: LoadBalancer
  sessionAffinity: ClientIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: microservices-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: api-gateway-backendconfig
  namespace: microservices-app
spec:
  healthCheck:
    checkIntervalSec: 15
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /actuator/health
    port: 8080
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 1800
  timeoutSec: 30
  connectionDraining:
    drainingTimeoutSec: 60