apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: microservices-app
  labels:
    app: api-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: api-gateway
        image: nginx:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 30
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "k8s"
        - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
          value: "http://discovery-server:8761/eureka"
        # Using a ConfigMap for routes instead of environment variables
        volumeMounts:
        - name: gateway-config
          mountPath: /config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: gateway-config
        configMap:
          name: api-gateway-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: microservices-app
data:
  application.yml: |
    spring:
      cloud:
        gateway:
          routes:
            - id: product-service
              uri: lb://product-service
              predicates:
                - Path=/api/products/**
            - id: order-service
              uri: lb://order-service
              predicates:
                - Path=/api/orders/**
            - id: inventory-service
              uri: lb://inventory-service
              predicates:
                - Path=/api/inventory/**
            - id: notification-service
              uri: lb://notification-service
              predicates:
                - Path=/api/notifications/**

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: microservices-app
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "api-gateway-backendconfig"}'
  labels:
    app: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: LoadBalancer
  sessionAffinity: ClientIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: microservices-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: api-gateway-backendconfig
  namespace: microservices-app
spec:
  healthCheck:
    checkIntervalSec: 15
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /actuator/health
    port: 8080
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 1800
  timeoutSec: 30
  connectionDraining:
    drainingTimeoutSec: 60