# Direct Deployment from Cloud Shell
# This script will deploy your microservices directly from Cloud Shell, bypassing GitHub Actions

# 1. Clone your repository to get the latest files
git clone https://github.com/Olisaemeka111/Microserivces-spring-kafka-microservices-app.git
cd Microserivces-spring-kafka-microservices-app

# 2. Clean up existing deployments
kubectl delete deployment --all -n microservices-app || true
kubectl delete statefulset --all -n microservices-app || true
echo "Waiting for all resources to be deleted..."
sleep 30

# 3. Create namespace if it doesn't exist
kubectl create namespace microservices-app --dry-run=client -o yaml | kubectl apply -f -

# 4. Deploy infrastructure components first
kubectl apply -f k8s/infrastructure.yaml
echo "Waiting for infrastructure components to start..."
sleep 30
kubectl get pods -n microservices-app

# 5. Deploy Discovery Server (Eureka) - CRITICAL COMPONENT
kubectl apply -f k8s/discovery-server.yaml
echo "Waiting for Discovery Server to start..."
sleep 60
kubectl get pods -n microservices-app -l app=discovery-server

# 6. Deploy API Gateway
kubectl apply -f k8s/api-gateway.yaml
echo "Waiting for API Gateway to start..."
sleep 30
kubectl get pods -n microservices-app -l app=api-gateway

# 7. Deploy monitoring components
kubectl apply -f k8s/monitoring/prometheus-config.yaml
kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
kubectl apply -f k8s/monitoring/grafana-deployment.yaml
echo "Waiting for monitoring components to start..."
sleep 30
kubectl get pods -n microservices-app

# 8. Deploy logging components
kubectl apply -f k8s/logging/elasticsearch-deployment.yaml
kubectl apply -f k8s/logging/kibana-deployment.yaml
kubectl apply -f k8s/logging/logstash-deployment.yaml
echo "Waiting for logging components to start..."
sleep 30
kubectl get pods -n microservices-app

# 9. Check final status
echo "Final deployment status:"
kubectl get pods -n microservices-app
kubectl get services -n microservices-app
