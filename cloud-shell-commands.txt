# Google Cloud Shell Commands for Accessing Your Application

## 1. Access Cloud Shell

1. Go to https://console.cloud.google.com/
2. Click the Cloud Shell icon (>_) in the top right corner of the console
3. This opens a terminal at the bottom of your browser window

## 2. Start Your GKE Cluster (if not running)

```bash
# Check cluster status
gcloud container clusters list

# Start the cluster if it's not running
gcloud container clusters start spring-kafka-cluster --zone us-central1 --project spring-kafka-microservices
```

## 3. Get Cluster Credentials

```bash
gcloud container clusters get-credentials spring-kafka-cluster --zone us-central1 --project spring-kafka-microservices
```

## 4. Check Your Application and Services

```bash
# Check all resources in your namespace
kubectl get all -n microservices-app

# Get the external IP of your API Gateway
kubectl get service api-gateway -n microservices-app

# Check the status of all pods
kubectl get pods -n microservices-app
```

## 5. Access Your Application

If your API Gateway has an external IP, you can access it at:
`http://<API-GATEWAY-EXTERNAL-IP>`

## 6. Check Monitoring Services

```bash
# Check if Grafana and Kibana are deployed
kubectl get service grafana -n microservices-app
kubectl get service kibana -n microservices-app
```

Access the dashboards at:
- Grafana: `http://<GRAFANA-EXTERNAL-IP>` (username: admin, password: admin123)
- Kibana: `http://<KIBANA-EXTERNAL-IP>`

## 7. Troubleshoot CrashLoopBackOff Pods

```bash
# Check logs for Kafka pod
kubectl logs -l app=kafka -n microservices-app

# Check logs for product-service pod
kubectl logs -l app=product-service -n microservices-app

# Describe the pods to see events
kubectl describe pod -l app=kafka -n microservices-app
kubectl describe pod -l app=product-service -n microservices-app
```

## 8. Port-Forward for Web Preview in Cloud Shell

If you want to access services directly in Cloud Shell:

```bash
# Forward API Gateway to port 8080
kubectl port-forward svc/api-gateway 8080:80 -n microservices-app
```

Then click the "Web Preview" button in Cloud Shell and select port 8080.

## 9. Deploy or Update Monitoring Components

If you need to manually apply monitoring components:

```bash
# Clone your repository in Cloud Shell
git clone https://github.com/Olisaemeka111/Microserivces-spring-kafka-microservices-app.git
cd Microserivces-spring-kafka-microservices-app

# Apply monitoring components
kubectl apply -f k8s/monitoring/prometheus-config.yaml
kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
kubectl apply -f k8s/monitoring/grafana-deployment.yaml

# Apply logging components
kubectl apply -f k8s/logging/elasticsearch-deployment.yaml
kubectl apply -f k8s/logging/kibana-deployment.yaml
kubectl apply -f k8s/logging/logstash-deployment.yaml
kubectl apply -f k8s/logging/filebeat-deployment.yaml
```
