# Manual Configuration for kubectl Access to GKE

Since we're having issues with the automated script, let's try a manual approach to configure kubectl access to your GKE cluster.

## 1. Download kubectl Configuration from Google Cloud Console

1. Go to the Google Cloud Console: https://console.cloud.google.com/
2. Navigate to Kubernetes Engine > Clusters
3. Find your cluster "spring-kafka-cluster"
4. Click on the "Connect" button
5. Click "Run in Cloud Shell" to see the command, but don't actually run it
6. Copy the command that looks like:
   ```
   gcloud container clusters get-credentials spring-kafka-cluster --zone us-central1 --project spring-kafka-microservices
   ```

## 2. Manually Create kubeconfig File

1. Create a new file at: `C:\Users\olisa\.kube\config` (create the .kube directory if it doesn't exist)
2. Go to the Google Cloud Console > Kubernetes Engine > Clusters
3. Click on your cluster, then click "Show cluster certificate"
4. Copy the certificate data

5. Create a config file with this template (replace the placeholders with your actual values):

```yaml
apiVersion: v1
kind: Config
preferences: {}
clusters:
- cluster:
    certificate-authority-data: YOUR_CLUSTER_CERTIFICATE_DATA
    server: https://YOUR_CLUSTER_ENDPOINT
  name: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
contexts:
- context:
    cluster: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
    user: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
  name: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
current-context: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
users:
- name: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
  user:
    auth-provider:
      config:
        cmd-args: config config-helper --format=json
        cmd-path: gcloud
        expiry-key: '{.credential.token_expiry}'
        token-key: '{.credential.access_token}'
      name: gcp
```

## 3. Test kubectl Access

```powershell
# Set the KUBECONFIG environment variable
$env:KUBECONFIG = "C:\Users\olisa\.kube\config"

# Test access
kubectl get nodes
```

## 4. Deploy Monitoring Using kubectl

If the above works, you can deploy the monitoring components:

```powershell
# Create namespace if it doesn't exist
kubectl create namespace microservices-app

# Deploy monitoring components
kubectl apply -f k8s/monitoring/prometheus-config.yaml
kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
kubectl apply -f k8s/monitoring/grafana-deployment.yaml

# Deploy logging components
kubectl apply -f k8s/logging/elasticsearch-deployment.yaml
kubectl apply -f k8s/logging/kibana-deployment.yaml
kubectl apply -f k8s/logging/logstash-deployment.yaml
kubectl apply -f k8s/logging/filebeat-deployment.yaml
```

## Alternative: Use GitHub Actions

If you continue to have issues with local access, use the GitHub Actions workflow as described in `deploy-monitoring-github-actions.txt`.
