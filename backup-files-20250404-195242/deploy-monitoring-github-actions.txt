# Deploying Monitoring and Logging via GitHub Actions

Since we're having issues with local access to the GKE cluster, the most reliable approach is to use GitHub Actions to deploy the monitoring and logging components.

## Steps to Deploy Using GitHub Actions:

1. **Verify the GitHub Actions Workflow File**
   The workflow file has already been created at:
   `.github/workflows/monitoring-logging.yml`

2. **Push the Changes to GitHub**
   ```
   git add .github/workflows/monitoring-logging.yml
   git add k8s/monitoring/
   git add k8s/logging/
   git commit -m "Add monitoring and logging components"
   git push origin main
   ```

3. **Run the Workflow Manually**
   - Go to your GitHub repository
   - Click on the "Actions" tab
   - Find the "Deploy Monitoring and Logging" workflow
   - Click "Run workflow" on the main branch

4. **Monitor the Workflow Execution**
   - The workflow will authenticate with GCP
   - Get credentials for your GKE cluster
   - Deploy all monitoring and logging components
   - Wait for deployments to be ready
   - Output the URLs to access the dashboards

5. **Access the Dashboards**
   After the workflow completes successfully, you can find the URLs for Grafana and Kibana in the workflow logs.

   Typical URLs will look like:
   - Grafana: http://[EXTERNAL-IP]
   - Kibana: http://[EXTERNAL-IP]

   Grafana credentials:
   - Username: admin
   - Password: admin123

## Troubleshooting Existing Pods

The workflow will also help fix the current issues with Kafka and product-service pods by:
- Ensuring all dependencies are properly deployed
- Applying the correct configurations
- Setting up proper monitoring that will help diagnose issues

## Benefits of This Approach

1. No need for local access to the GKE cluster
2. Authentication is handled automatically
3. All components are deployed consistently
4. The workflow can be reused for future updates
