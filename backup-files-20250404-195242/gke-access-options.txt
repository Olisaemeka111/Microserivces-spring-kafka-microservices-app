# Options for Accessing Your GKE Cluster and Application

Since you're having issues with local kubectl access, here are multiple approaches to access your cluster and application:

## Option 1: Google Cloud Console and Cloud Shell (Recommended)

This is the most reliable method since it doesn't require any local setup:

1. Go to https://console.cloud.google.com/
2. Navigate to Kubernetes Engine > Clusters
3. Find your cluster "spring-kafka-cluster"
4. Click the "Connect" button
5. Click "Run in Cloud Shell"

This opens a browser-based terminal with kubectl already configured to access your cluster.

## Option 2: Install Google Cloud CLI Using Installer

If you want local access, reinstall the Google Cloud SDK using the official installer:

1. Download the latest installer from: https://cloud.google.com/sdk/docs/install
2. Run the installer and follow the prompts
3. During installation, select the option to add gcloud to your PATH
4. After installation, open a new PowerShell window and run:
   ```powershell
   gcloud init
   gcloud components install gke-gcloud-auth-plugin kubectl
   $env:USE_GKE_GCLOUD_AUTH_PLUGIN = "True"
   gcloud container clusters get-credentials spring-kafka-cluster --zone us-central1 --project spring-kafka-microservices
   kubectl get nodes
   ```

## Option 3: Download kubeconfig Directly

You can download the kubeconfig file directly from the Google Cloud Console:

1. Go to https://console.cloud.google.com/
2. Navigate to Kubernetes Engine > Clusters
3. Find your cluster and click "Connect"
4. Copy the command that looks like:
   ```
   gcloud container clusters get-credentials spring-kafka-cluster --zone us-central1 --project spring-kafka-microservices
   ```
5. Note the cluster endpoint and certificate data shown
6. Create a file at `%USERPROFILE%\.kube\config` with this structure:
   ```yaml
   apiVersion: v1
   kind: Config
   preferences: {}
   clusters:
   - cluster:
       certificate-authority-data: YOUR_CLUSTER_CERTIFICATE_DATA
       server: https://YOUR_CLUSTER_ENDPOINT
     name: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
   contexts:
   - context:
       cluster: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
       user: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
     name: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
   current-context: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
   users:
   - name: gke_spring-kafka-microservices_us-central1_spring-kafka-cluster
     user:
       auth-provider:
         config:
           cmd-args: config config-helper --format=json
           cmd-path: gcloud
           expiry-key: '{.credential.token_expiry}'
           token-key: '{.credential.access_token}'
         name: gcp
   ```

## Accessing Your Application

Once you have cluster access, you can:

1. Get your API Gateway's external IP:
   ```
   kubectl get service api-gateway -n microservices-app
   ```

2. Access your application at:
   `http://<API-GATEWAY-EXTERNAL-IP>`

3. If no external IP is available, use port-forwarding:
   ```
   kubectl port-forward svc/api-gateway 8080:80 -n microservices-app
   ```
   Then access at: http://localhost:8080

## Accessing Monitoring Dashboards

Similarly, access your monitoring dashboards:

1. Get the external IPs:
   ```
   kubectl get service grafana -n microservices-app
   kubectl get service kibana -n microservices-app
   ```

2. Access at:
   - Grafana: `http://<GRAFANA-EXTERNAL-IP>` (username: admin, password: admin123)
   - Kibana: `http://<KIBANA-EXTERNAL-IP>`

3. Or use port-forwarding:
   ```
   kubectl port-forward svc/grafana 3000:80 -n microservices-app
   kubectl port-forward svc/kibana 5601:80 -n microservices-app
   ```
   Then access at:
   - Grafana: http://localhost:3000
   - Kibana: http://localhost:5601
